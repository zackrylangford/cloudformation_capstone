Description: CloudFormation template for Zack L. Capstone


Parameters:
  KeyName:
    Description: KeyPair for SSH into EC2
    Type: 'AWS::EC2::KeyPair:KeyName'
## RDS Parameters
  DBInstanceID:
    Default: mydbinstance
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBName:
    Default: mydb
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.

  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

Resources:
  
## VPC and Subnets  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      Tags:
        - Key: Name
          Value: Whiteboard VPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: VPC
      CidrBlock: 192.168.10.0/24
      Tags:
        - Key: Name
          Value: Bastion Subnet

  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: VPC
      CidrBlock: 192.168.20.0/24
      Tags:
        - Key: Name
          Value: MainDB Subnet

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: VPC
      CidrBlock: 192.168.30.0/24
      Tags:
        - Key: Name
          Value: BackupDB Subnet

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: VPC
      CidrBlock: 192.168.40.0/24
      Tags:
        - Key: Name
          Value: Public Web Server Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: VPC
      CidrBlock: 192.168.50.0/24
      Tags:
        - Key: Name
          Value: Public Web Server Subnet 2

## Gateways and Routing Configuration
  internetgateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: Internet Gateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: VPC
      InternetGatewayId: !Ref internetgateway

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: VPC
      Tags:
        - Key: Name
          Value: PublicRT1
  routeTableAssocName:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: PublicSubnet1
      RouteTableId: PublicRouteTable1
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetgateway

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: VPC
      Tags:
        - Key: Name
          Value: PublicRT2
  routeTableAssoc2Name:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: PublicSubnet2
      RouteTableId: PublicRouteTable2
  PublicRoute2:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetgateway

  NATGateway:
    Type: AWS::EC2::NatGateway
      Properties: 
        ConnectivityType: private
        SubnetId: DBSubnet1
        Tags: 
          - Tag
  DBRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: VPC
      Tags:
        - Key: Name
          Value: DBRT1
  DBRouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnet1
      RouteTableId: DBRouteTable1
  DB1Route:
    Type: AWS::EC2::Route
    DependsOn:
      - NATGateway
    Properties:
      RouteTableId: !Ref DBRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NATGateway

  NATGateway2:
    Type: AWS::EC2::NatGateway
      Properties: 
        ConnectivityType: private
        SubnetId: DBSubnet2
        Tags: 
          - Tag
  DBRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: VPC
      Tags:
        - Key: Name
          Value: DBRT2
  DBRouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBSubnet2
      RouteTableId: DBRouteTable2
  DB2Route:
    Type: AWS::EC2::Route
    DependsOn:
      - NATGateway2
    Properties:
      RouteTableId: !Ref DBRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NATGateway


### SECURITY GROUPS

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
    GroupDescription: Bastion Security Group
    VpcId:
      Ref: VPC
    SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow for HTTP, HTTPS, and SSH 
      VpcId: 
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 192.169.40/24
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 192.169.50/24        
      Tags:
        -
          Key: Name
          Value: Web Server Security Group
  DBServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private Ingress to allow webserver access
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 192.168.40.0/16
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 192.168.50.0/16
      Tags:
        -
          Key: Name
          Value: Database Security Group


  
  
## Bastion Instance
  myEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName 
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt BastionSecurityGroup.GroupId
      SubnetId: !Ref PrivateSubnet1
      Tags:
        - Key: Name
          Value: Bastion Server Instance


## Wordpress Instances

  WordpressInstance1:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-0ed9277fb7eb570c9 
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt WebServerSecurityGroup.GroupId 
      KeyName: !Ref KeyName
      Tags:
        - 
          Key: 'Name'
          Value: 'WP Server 1'
      SubnetId: !Ref PublicSubnet1
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from webserver 1, us-east-1a</h1>" > /var/www/html/index.html

  WordpressInstance2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-0ed9277fb7eb570c9 
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt WebServerSecurityGroup.GroupId 
      KeyName: !Ref KeyName
      Tags:
        - 
          Key: 'Name'
          Value: 'WP Server 2'
      SubnetId: !Ref PublicSubnet1
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from webserver 2, us-east-1a</h1>" > /var/www/html/index.html

  WordpressInstance3:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1b
      ImageId: ami-0ed9277fb7eb570c9 
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt WebServerSecurityGroup.GroupId 
      KeyName: !Ref KeyName
      Tags:
        - 
          Key: 'Name'
          Value: 'WP Server 3'
      SubnetId: !Ref PublicSubnet2
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from webserver 3, us-east-1b</h1>" > /var/www/html/index.html

  WordpressInstance4:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1b
      ImageId: ami-0ed9277fb7eb570c9 
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt WebServerSecurityGroup.GroupId 
      KeyName: !Ref KeyName
      Tags:
        - 
          Key: 'Name'
          Value: 'WP Server 4'
      SubnetId: !Ref PublicSubnet2
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from webserver 4, us-east-1b</h1>" > /var/www/html/index.html

## AutoScaling


## RDS Instance (with multi-AZ deployment for backup)

  RDS1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: db.m5.large
      AllocatedStorage: '50'
      AvailabilityZone: us-east-1a
      Engine: MySQL
      EngineVersion: "8.0.16"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'true'

## Target Group and Load Balancer for Webservers
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref WordpressInstance1
        Port: 80
      - Id: !Ref WordpressInstance2
        Port: 80
      - Id: !Ref WordpressInstance3
        Port: 80
      - Id: !Ref WordpressInstance4
        Port: 80        
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ELBSecurityGroup.GroupId



## S3 Buckets for Storage and Backups






  


